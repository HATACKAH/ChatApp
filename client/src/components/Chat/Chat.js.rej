diff a/client/src/components/Chat/Chat.js b/client/src/components/Chat/Chat.js	(rejected hunks)
@@ -33,43 +34,65 @@ const ChatComponent = ({
     const userName = useSelector(s => s.userName);
     const rooms = useSelector(s => Object.keys(s.rooms));
 
-
     const currentRoom = useSelector(s => s.currentRoom);
+
+    // eslint-disable-next-line
     const users = useSelector(s => s.currentRoom && s.rooms[s.currentRoom] && s.rooms[s.currentRoom].users || []);
+
+    // eslint-disable-next-line
     const messages = useSelector(s => s.currentRoom && s.rooms[s.currentRoom] && s.rooms[s.currentRoom].messages || []);
 
     const [messageInputText, setMessageInputText] = useState('');
 
     useEffect(() => {
-        const { name, room } = queryString.parse(location.search);
+        const query = queryString.parse(location.search);
 
-        socket = io(ENDPOINT);
+        let room, name;
+        if (currentRoom) {
+            room = currentRoom;
+        }
+        else if (query.room) {
+            room = query.room;
+            setRoom(room);
+        }
 
-        setRoom(room);
-        setName(name);
+        if (userName) {
+            name = userName;
+        }
+        else if (query.name) {
+            name = query.name;
+            setName(name);
+        }
+
+        if (!joinedRooms.length) {
+            socket = io(ENDPOINT);
 
-        socket.on("roomData", ({ room, users }) => {
-            console.log('roomdata', users)
-            roomUsersUpdated(room, users);
-        });
+            socket.on("roomData", ({ room, users }) => {
+                roomUsersUpdated(room, users);
+            });
 
-        socket.on('message', ({ user, text, room }) => {
-            addMessage(user, text, room);
-        });
+            socket.on('message', ({ user, text, room }) => {
+                addMessage(user, text, room);
+            });
+        }
 
-        socket.emit('join', { name, room }, (error) => {
-            if (error) {
-                alert(error);
-            }
-        });
+        if (!joinedRooms.includes(room)) {
+            socket.emit('join', { name, room }, error => {
+                if (error) {
+                    alert(error);
+                }
+            });
+
+            joinedRooms.push(room);
+        }
 
-    }, [ENDPOINT, location.search]);
+    }, [location.search, currentRoom, userName]);
 
     const sendMessage = e => {
         e.preventDefault();
 
         if (messageInputText) {
-            socket.emit('sendMessage', messageInputText, () => setMessageInputText(''));
+            socket.emit('sendMessage', { room: currentRoom, text: messageInputText }, () => setMessageInputText(''));
         }
     }
 
