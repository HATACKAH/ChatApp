From 80b17aab5549a8a6e313b855f9d46bedac860cb2 Mon Sep 17 00:00:00 2001
From: Mikhail Gunin <gunka462@gmail.com>
Date: Fri, 25 Sep 2020 21:26:25 +0300
Subject: [PATCH] =?UTF-8?q?=D1=84=D0=B8=D0=BA=D1=81=20=D0=BF=D0=B5=D1=80?=
 =?UTF-8?q?=D0=B5=D0=BA=D0=BB=D1=8E=D1=87=D0=B5=D0=BD=D0=B8=D1=8F=20=D1=87?=
 =?UTF-8?q?=D0=B0=D1=82=D0=BE=D0=B2?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 client/src/components/Chat/Chat.js            | 61 +++++++++++------
 client/src/components/InfoBar/InfoBar.css     |  2 +-
 client/src/components/InfoBar/InfoBar.js      |  4 --
 .../components/Messages/Message/Message.js    |  2 +-
 .../components/TopicsWindow/TopicsWindow.js   | 67 ++++++++++---------
 client/src/store/index.js                     | 11 ++-
 server/index.js                               |  6 +-
 server/users.js                               |  4 +-
 8 files changed, 94 insertions(+), 63 deletions(-)

diff --git a/client/src/components/Chat/Chat.js b/client/src/components/Chat/Chat.js
index c5485aa..68f15a8 100755
--- a/client/src/components/Chat/Chat.js
+++ b/client/src/components/Chat/Chat.js
@@ -22,6 +22,7 @@ import './Chat.css';
 const ENDPOINT = 'localhost:5000';
 
 let socket;
+const joinedRooms = [];
 
 const ChatComponent = ({
     location,
@@ -33,43 +34,65 @@ const ChatComponent = ({
     const userName = useSelector(s => s.userName);
     const rooms = useSelector(s => Object.keys(s.rooms));
 
-
     const currentRoom = useSelector(s => s.currentRoom);
+
+    // eslint-disable-next-line
     const users = useSelector(s => s.currentRoom && s.rooms[s.currentRoom] && s.rooms[s.currentRoom].users || []);
+
+    // eslint-disable-next-line
     const messages = useSelector(s => s.currentRoom && s.rooms[s.currentRoom] && s.rooms[s.currentRoom].messages || []);
 
     const [messageInputText, setMessageInputText] = useState('');
 
     useEffect(() => {
-        const { name, room } = queryString.parse(location.search);
+        const query = queryString.parse(location.search);
 
-        socket = io(ENDPOINT);
+        let room, name;
+        if (currentRoom) {
+            room = currentRoom;
+        }
+        else if (query.room) {
+            room = query.room;
+            setRoom(room);
+        }
 
-        setRoom(room);
-        setName(name);
+        if (userName) {
+            name = userName;
+        }
+        else if (query.name) {
+            name = query.name;
+            setName(name);
+        }
+
+        if (!joinedRooms.length) {
+            socket = io(ENDPOINT);
 
-        socket.on("roomData", ({ room, users }) => {
-            console.log('roomdata', users)
-            roomUsersUpdated(room, users);
-        });
+            socket.on("roomData", ({ room, users }) => {
+                roomUsersUpdated(room, users);
+            });
 
-        socket.on('message', ({ user, text, room }) => {
-            addMessage(user, text, room);
-        });
+            socket.on('message', ({ user, text, room }) => {
+                addMessage(user, text, room);
+            });
+        }
 
-        socket.emit('join', { name, room }, (error) => {
-            if (error) {
-                alert(error);
-            }
-        });
+        if (!joinedRooms.includes(room)) {
+            socket.emit('join', { name, room }, error => {
+                if (error) {
+                    alert(error);
+                }
+            });
+
+            joinedRooms.push(room);
+        }
 
-    }, [ENDPOINT, location.search]);
+    }, [location.search, currentRoom, userName]);
 
     const sendMessage = e => {
         e.preventDefault();
 
         if (messageInputText) {
-            socket.emit('sendMessage', messageInputText, () => setMessageInputText(''));
+            socket.emit('sendMessage', { room: currentRoom, text: messageInputText }, () => setMessageInputText(''));
         }
     }
 
diff --git a/client/src/components/InfoBar/InfoBar.css b/client/src/components/InfoBar/InfoBar.css
index b43531f..8cbbe3b 100755
--- a/client/src/components/InfoBar/InfoBar.css
+++ b/client/src/components/InfoBar/InfoBar.css
@@ -28,7 +28,7 @@
 .onlineIcon {
   margin-right: 5%;
 }
-.rightInnerContainer a:hover {
+.rightInnerContainer span:hover {
   box-shadow: 0 5px 15px rgba(0,0,0,0.3);
   transition: all 0.3s ease-in-out;
 }
\ No newline at end of file
diff --git a/client/src/components/InfoBar/InfoBar.js b/client/src/components/InfoBar/InfoBar.js
index ca929ee..7b51841 100755
--- a/client/src/components/InfoBar/InfoBar.js
+++ b/client/src/components/InfoBar/InfoBar.js
@@ -2,7 +2,6 @@ import React from 'react';
 import ModalMembers from './ModalMembers'
 
 import onlineIcon from '../../icons/onlineIcon.png';
-import VideoCallIcon from '@material-ui/icons/VideoCall';
 import './InfoBar.css';
 
 
@@ -16,9 +15,6 @@ export default function InfoBar({ room, users }) {
             <div className='centerInnerContainer'>
                 <ModalMembers users={users} />
             </div>
-            <div className="rightInnerContainer">
-                <a><VideoCallIcon style={{ color: "white" }} /></a> {/*will be redirect to the videoroom */}
-            </div>
         </div>
     )
 }
diff --git a/client/src/components/Messages/Message/Message.js b/client/src/components/Messages/Message/Message.js
index bc7e5dc..1d036ce 100755
--- a/client/src/components/Messages/Message/Message.js
+++ b/client/src/components/Messages/Message/Message.js
@@ -6,7 +6,7 @@ import ReactEmoji from 'react-emoji';
 
 const Message = ({ msg, currentUserName }) => {
     const { message, userName } = msg;
-    const trimmedName = currentUserName.trim().toLowerCase();
+    const trimmedName = currentUserName.trim();
     const isSentByCurrentUser = userName === trimmedName;
 
     return (
diff --git a/client/src/components/TopicsWindow/TopicsWindow.js b/client/src/components/TopicsWindow/TopicsWindow.js
index 4c9bfb6..1194175 100644
--- a/client/src/components/TopicsWindow/TopicsWindow.js
+++ b/client/src/components/TopicsWindow/TopicsWindow.js
@@ -1,49 +1,56 @@
-import React , { useState } from 'react'
-import {connect} from 'react-redux'
+import React, { useState } from 'react'
+import { connect } from 'react-redux'
 import './TopicsWindow.css';
 import List from '@material-ui/core/List';
 import ListItem from '@material-ui/core/ListItem';
 import ListItemText from '@material-ui/core/ListItemText';
 import Button from '@material-ui/core/Button';
 import TextField from '@material-ui/core/TextField';
-import { Link } from "react-router-dom";
-import {setRoom} from '../../store/actions';
+import { setRoom } from '../../store/actions';
 
 
- function TopicsWindow ({currentUserName, rooms, setRoom}) {
-    const [room, setRooms] = useState('');
-    console.log(setRoom)
+function TopicsWindow({ rooms, setRoom }) {
+    const [roomInput, setRoomInput] = useState('');
 
     return (
-       <List className='topic-wrapper'>
-           <div>
-               <h3> Add new room: </h3>
-               <TextField id="outlined-basic" label="Enter room name" variant="outlined" onChange={(event) => setRooms(event.target.value)}/>
-               <Link onClick={e => (!room) ? e.preventDefault() : null} to={`/chat?name=${currentUserName}&room=${room}`}>
-               <Button variant="contained" >Add</Button>
-               </Link>
-           </div>
-           {
-               rooms.map(room => (
-                <ListItem key={room} button>
-                    <ListItemText
-                        primary={room} 
+        <List className='topic-wrapper'>
+            <div>
+                <h3>Add new room:</h3>
+
+                <TextField id="outlined-basic" label="Enter room name" variant="outlined"
+                    value={roomInput}
+                    onChange={e => setRoomInput(e.target.value)} />
+
+                <Button variant="contained"
                         onClick={e => {
-                            setRoom(room);
-                          }}
+                            setRoom(roomInput)
+                            setRoomInput('')
+                        }}>
+                    Add
+                </Button>
+
+            </div>
+            {
+                rooms.map(room => (
+                    <ListItem key={room} button>
+                        <ListItemText
+                            primary={room}
+                            onClick={() => {
+                                setRoom(room);
+                            }}
                         />
-                </ListItem>
-               ))
-           }
-       </List>
-      )
+                    </ListItem>
+                ))
+            }
+        </List>
+    )
 }
 
 const mapDispatchToProps = {
     setRoom
-  }
+}
 
-  export default connect(
+export default connect(
     null,
     mapDispatchToProps
-  )(TopicsWindow)
\ No newline at end of file
+)(TopicsWindow)
\ No newline at end of file
diff --git a/client/src/store/index.js b/client/src/store/index.js
index ac09ca3..d246375 100644
--- a/client/src/store/index.js
+++ b/client/src/store/index.js
@@ -36,17 +36,22 @@ function rootReducer(state = initialState, action) {
             const { room, users } = action;
 
             const r = initRoom(s, room);
+
+            // eslint-disable-next-line
             r.users = users && [...users] || [];
 
-            console.log('room data', r, s);
             return s;
         }
 
         case ActionTypes.SET_ROOM: {
-            return {
+            const s = {
                 ...state,
                 currentRoom: action.room,
-            }
+            };
+
+            initRoom(s, action.room);
+
+            return s;
         }
 
         case ActionTypes.SET_NAME: {
diff --git a/server/index.js b/server/index.js
index 90108ce..08bd62c 100755
--- a/server/index.js
+++ b/server/index.js
@@ -9,7 +9,7 @@ const router = require('./router');
 
 const app = express();
 const server = http.createServer(app);
-const io = socketio(server);
+const io = socketio(server, { transports: ['polling'], allowUpgrades: false });
 
 app.use(cors());
 app.use(router);
@@ -47,8 +47,8 @@ io.on('connect', socket => {
 
         io.to(user.room).emit('message', {
             user: user.name,
-            text: message,
-            room: user.room
+            text: message.text,
+            room: message.room,
         });
 
         callback();
diff --git a/server/users.js b/server/users.js
index 0104726..65b667c 100755
--- a/server/users.js
+++ b/server/users.js
@@ -1,8 +1,8 @@
 const users = [];
 
 const addUser = ({ id, name, room }) => {
-  name = name.trim().toLowerCase();
-  room = room.trim().toLowerCase();
+  name = name.trim();
+  room = room.trim();
 
   const existingUser = users.find(user => user.room === room && user.name === name);
 
-- 
2.20.1.windows.1

